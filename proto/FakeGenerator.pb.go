// Code generated by protoc-gen-go.
// source: FakeGenerator.proto
// DO NOT EDIT!

/*
Package fakegenerator is a generated protocol buffer package.

It is generated from these files:
	FakeGenerator.proto

It has these top-level messages:
*/
package fakegenerator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import FakeGeneratorMessages "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FakeGenerator service

type FakeGeneratorClient interface {
	GetUser(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.User, error)
	GetAddress(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Address, error)
	GetEmail(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Email, error)
	GetDate(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Date, error)
}

type fakeGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewFakeGeneratorClient(cc *grpc.ClientConn) FakeGeneratorClient {
	return &fakeGeneratorClient{cc}
}

func (c *fakeGeneratorClient) GetUser(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.User, error) {
	out := new(FakeGeneratorMessages.User)
	err := grpc.Invoke(ctx, "/fakegenerator.FakeGenerator/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fakeGeneratorClient) GetAddress(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Address, error) {
	out := new(FakeGeneratorMessages.Address)
	err := grpc.Invoke(ctx, "/fakegenerator.FakeGenerator/GetAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fakeGeneratorClient) GetEmail(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Email, error) {
	out := new(FakeGeneratorMessages.Email)
	err := grpc.Invoke(ctx, "/fakegenerator.FakeGenerator/GetEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fakeGeneratorClient) GetDate(ctx context.Context, in *FakeGeneratorMessages.EmptyMessage, opts ...grpc.CallOption) (*FakeGeneratorMessages.Date, error) {
	out := new(FakeGeneratorMessages.Date)
	err := grpc.Invoke(ctx, "/fakegenerator.FakeGenerator/GetDate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FakeGenerator service

type FakeGeneratorServer interface {
	GetUser(context.Context, *FakeGeneratorMessages.EmptyMessage) (*FakeGeneratorMessages.User, error)
	GetAddress(context.Context, *FakeGeneratorMessages.EmptyMessage) (*FakeGeneratorMessages.Address, error)
	GetEmail(context.Context, *FakeGeneratorMessages.EmptyMessage) (*FakeGeneratorMessages.Email, error)
	GetDate(context.Context, *FakeGeneratorMessages.EmptyMessage) (*FakeGeneratorMessages.Date, error)
}

func RegisterFakeGeneratorServer(s *grpc.Server, srv FakeGeneratorServer) {
	s.RegisterService(&_FakeGenerator_serviceDesc, srv)
}

func _FakeGenerator_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FakeGeneratorMessages.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeGeneratorServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fakegenerator.FakeGenerator/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeGeneratorServer).GetUser(ctx, req.(*FakeGeneratorMessages.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FakeGenerator_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FakeGeneratorMessages.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeGeneratorServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fakegenerator.FakeGenerator/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeGeneratorServer).GetAddress(ctx, req.(*FakeGeneratorMessages.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FakeGenerator_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FakeGeneratorMessages.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeGeneratorServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fakegenerator.FakeGenerator/GetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeGeneratorServer).GetEmail(ctx, req.(*FakeGeneratorMessages.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FakeGenerator_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FakeGeneratorMessages.EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FakeGeneratorServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fakegenerator.FakeGenerator/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FakeGeneratorServer).GetDate(ctx, req.(*FakeGeneratorMessages.EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _FakeGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fakegenerator.FakeGenerator",
	HandlerType: (*FakeGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _FakeGenerator_GetUser_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _FakeGenerator_GetAddress_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _FakeGenerator_GetEmail_Handler,
		},
		{
			MethodName: "GetDate",
			Handler:    _FakeGenerator_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("FakeGenerator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x76, 0x4b, 0xcc, 0x4e,
	0x75, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4d, 0x4b, 0xcc, 0x4e, 0x4d, 0x87, 0x09, 0x4a, 0x49, 0xa3, 0xa8, 0xf1, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x2d, 0x86, 0xa8, 0x35, 0x9a, 0xcd, 0xc8, 0xc5, 0x8b, 0x22, 0x2f, 0x24, 0xcf,
	0xc5, 0xee, 0x9e, 0x5a, 0x12, 0x5a, 0x9c, 0x5a, 0x24, 0xc4, 0xab, 0xe7, 0x9a, 0x5b, 0x50, 0x52,
	0x09, 0xd5, 0x22, 0xc5, 0xaa, 0x07, 0x16, 0x55, 0xe5, 0xe2, 0x72, 0x4f, 0x2d, 0x71, 0x4c, 0x49,
	0x29, 0x4a, 0x2d, 0x2e, 0x46, 0x57, 0xc3, 0xa1, 0x07, 0x93, 0x50, 0xe4, 0xe2, 0x70, 0x4f, 0x2d,
	0x71, 0xcd, 0x4d, 0xcc, 0xcc, 0x41, 0x57, 0xc4, 0xa6, 0x07, 0x11, 0x86, 0x58, 0xe5, 0x92, 0x58,
	0x92, 0x8a, 0x69, 0x15, 0x48, 0x34, 0x89, 0x0d, 0xec, 0x48, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x61, 0xec, 0x03, 0xe7, 0x00, 0x00, 0x00,
}
